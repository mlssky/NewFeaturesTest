WebSettings 的常用方法介绍
    setJavaScriptEnabled(true);  //支持js
    setPluginsEnabled(true);  //支持插件
    setUseWideViewPort(false);  //设置屏幕密度为高频，中频，低频自动缩放，禁止用户手动调整缩放，将图片调整到适合webview的大小
    setSupportZoom(true);  //支持缩放
    setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); //支持内容重新布局
    supportMultipleWindows();  //多窗口
    setAppCacheEnabled(true);   //支持系统缓存,如果为true，则必需设定setAppCachePath
    setAppCachePath(path)； //设置缓存路径
    setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);  //关闭webview中缓存
        缓存模式：
           public static final int LOAD_DEFAULT = -1;//默认模式，当缓存资源是可用的不过期，就使用，否次网络加载
           public static final int LOAD_NORMAL = 0;//This value is obsolete,过时了，不用管
           public static final int LOAD_CACHE_ELSE_NETWORK = 1;//当缓存资源是可用的就使用,即使它是过期的，否次网络加载
           public static final int LOAD_NO_CACHE = 2;//不使用缓存
           public static final int LOAD_CACHE_ONLY = 3;//不使用网络
    setAllowFileAccess(true);  //设置可以访问文件
    setNeedInitialFocus(true); //当webview调用requestFocus时为webview设置节点
    setBuiltInZoomControls(true); //设置支持缩放
    setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口
    setLoadWithOverviewMode(true); // 缩放至屏幕的大小
    setLoadsImagesAutomatically(true);  //支持自动加载图片

WebViewClient 的方法全解
    doUpdateVisitedHistory(WebView view, String url, boolean isReload)  //(更新历史记录)
    onFormResubmission(WebView view, Message dontResend, Message resend) //(应用程序重新请求网页数据)
    onLoadResource(WebView view, String url) // 在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。
    onPageStarted(WebView view, String url, Bitmap favicon) //这个事件就是开始载入页面调用的，通常我们可以在这设定一个loading的页面，告诉用户程序在等待网络响应。
    onPageFinished(WebView view, String url) //在页面加载结束时调用。同样道理，我们知道一个页面载入完成，于是我们可以关闭loading 条，切换程序动作。
    onReceivedError(WebView view, int errorCode, String description, String failingUrl)// (报告错误信息)
    onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host,String realm)//（获取返回信息授权请求）
    onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) //重写此方法可以让webview处理https请求。
    onScaleChanged(WebView view, float oldScale, float newScale) // (WebView发生改变时调用)
    onUnhandledKeyEvent(WebView view, KeyEvent event) //（Key事件未被加载时调用）
    shouldOverrideKeyEvent(WebView view, KeyEvent event)//重写此方法才能够处理在浏览器中的按键事件。
    shouldOverrideUrlLoading(WebView view, String url)
    //在点击请求的是链接是才会调用，重写此方法返回true表明点击网页里面的链接还是在当前的webview里跳转，不跳到浏览器那边。这个函数我们可以做很多操作，比如我们读取到某些特殊的URL，于是就可以不打开地址，取消这个操作，进行预先定义的其他操作，这对一个程序是非常必要的。

按返回键时， 不退出程序而是返回上一浏览页面：
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if ((keyCode == KeyEvent.KEYCODE_BACK) && mWebView.canGoBack()) {
            mWebView.goBack();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }
初始页面为A，点击某个链接跳转到B,B页面重定向到C页面。当调用webview.goBack()时，页面回退到B，然后接着会重定向回C页面。
解决这个问题，有一种方法是依赖于 JS，通过 JS 的 API 可以实现对历史记录的管控。
webview.loadUrl("javascript:window.history.back();");

WebViewClient主要帮助WebView处理各种通知、请求事件的，比如：
    onLoadResource
    onPageStart                网页开始加载
    onPageFinish              网页加载完毕
    onReceiveError           接收出错
    onReceivedHttpAuthRequest
WebChromeClient主要辅助WebView处理Javascript的对话框、网站图标、网站title、加载进度等比如
    onCloseWindow(关闭WebView)
    onCreateWindow()
    onJsAlert (WebView上alert无效，需要定制WebChromeClient处理弹出)
    onJsPrompt
    onJsConfirm
    onProgressChanged
    onReceivedIcon
    onReceivedTitle
看上去他们有很多不同，实际使用的话，如果你的WebView只是用来处理一些html的页面内容，只用WebViewClient就行了，
如果需要更丰富的处理效果，比如JS、进度条等，就要用到WebChromeClient。