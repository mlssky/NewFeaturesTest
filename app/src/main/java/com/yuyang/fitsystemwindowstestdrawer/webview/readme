参考：https://www.jianshu.com/p/fd61e8f4049e

WebSettings 的常用方法介绍
    setJavaScriptEnabled(true);  //支持js
    setPluginsEnabled(true);  //支持插件
    setUseWideViewPort(false);  //设置屏幕密度为高频，中频，低频自动缩放，禁止用户手动调整缩放，将图片调整到适合webview的大小
    setSupportZoom(true);  //支持缩放
    setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); //支持内容重新布局
    supportMultipleWindows();  //多窗口
    setAppCacheEnabled(true);   //支持系统缓存,如果为true，则必需设定setAppCachePath
    setAppCachePath(path)； //设置缓存路径
    setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);  //关闭webview中缓存
        缓存模式：
           public static final int LOAD_DEFAULT = -1;//默认模式，当缓存资源是可用的不过期，就使用，否次网络加载
           public static final int LOAD_NORMAL = 0;//This value is obsolete,过时了，不用管
           public static final int LOAD_CACHE_ELSE_NETWORK = 1;//当缓存资源是可用的就使用,即使它是过期的，否次网络加载
           public static final int LOAD_NO_CACHE = 2;//不使用缓存
           public static final int LOAD_CACHE_ONLY = 3;//不使用网络
    setAllowFileAccess(true);  //设置可以访问文件
    setNeedInitialFocus(true); //当webview调用requestFocus时为webview设置节点
    setBuiltInZoomControls(true); //设置支持缩放
    setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口
    setLoadWithOverviewMode(true); // 缩放至屏幕的大小
    setLoadsImagesAutomatically(true);  //支持自动加载图片

WebViewClient 的方法全解
    doUpdateVisitedHistory(WebView view, String url, boolean isReload)  //(更新历史记录)
    onFormResubmission(WebView view, Message dontResend, Message resend) //(应用程序重新请求网页数据)
    onLoadResource(WebView view, String url) // 在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。
    onPageStarted(WebView view, String url, Bitmap favicon) //这个事件就是开始载入页面调用的，通常我们可以在这设定一个loading的页面，告诉用户程序在等待网络响应。
    onPageFinished(WebView view, String url) //在页面加载结束时调用。同样道理，我们知道一个页面载入完成，于是我们可以关闭loading 条，切换程序动作。
    onReceivedError(WebView view, int errorCode, String description, String failingUrl)// (报告错误信息)
    onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host,String realm)//（获取返回信息授权请求）
    onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) //重写此方法可以让webview处理https请求。
    onScaleChanged(WebView view, float oldScale, float newScale) // (WebView发生改变时调用)
    onUnhandledKeyEvent(WebView view, KeyEvent event) //（Key事件未被加载时调用）
    shouldOverrideKeyEvent(WebView view, KeyEvent event)//重写此方法才能够处理在浏览器中的按键事件。
    shouldOverrideUrlLoading(WebView view, String url)
    //在点击请求的是链接是才会调用，重写此方法返回true表明点击网页里面的链接还是在当前的webview里跳转，不跳到浏览器那边。这个函数我们可以做很多操作，比如我们读取到某些特殊的URL，于是就可以不打开地址，取消这个操作，进行预先定义的其他操作，这对一个程序是非常必要的。

按返回键时， 不退出程序而是返回上一浏览页面：
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if ((keyCode == KeyEvent.KEYCODE_BACK) && mWebView.canGoBack()) {
            mWebView.goBack();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }
初始页面为A，点击某个链接跳转到B,B页面重定向到C页面。当调用webview.goBack()时，页面回退到B，然后接着会重定向回C页面。
解决这个问题，有一种方法是依赖于 JS，通过 JS 的 API 可以实现对历史记录的管控。
webview.loadUrl("javascript:window.history.back();");

WebViewClient主要帮助WebView处理各种通知、请求事件的，比如：
    onLoadResource
    onPageStart                网页开始加载
    onPageFinish              网页加载完毕
    onReceiveError           接收出错
    onReceivedHttpAuthRequest
WebChromeClient主要辅助WebView处理Javascript的对话框、网站图标、网站title、加载进度等比如
    onCloseWindow(关闭WebView)
    onCreateWindow()
    onJsAlert (WebView上alert无效，需要定制WebChromeClient处理弹出)
    onJsPrompt
    onJsConfirm
    onProgressChanged
    onReceivedIcon
    onReceivedTitle
看上去他们有很多不同，实际使用的话，如果你的WebView只是用来处理一些html的页面内容，只用WebViewClient就行了，
如果需要更丰富的处理效果，比如JS、进度条等，就要用到WebChromeClient。

ZHU yuyang JS注入漏洞
目前已知的 WebView 漏洞有 4 个,分别是：
1、CVE-2012-6636，揭露了 WebView 中 addJavascriptInterface 接口会引起远程代码执行漏洞；
2、CVE-2013-4710，针对某些特定机型会存在 addJavascriptInterface API 引起的远程代码执行漏洞；
3、CVE-2014-1939，爆出 WebView 中内置导出的 “searchBoxJavaBridge_” Java Object 可能被利用，
    实现远程任意代码；
4、CVE-2014-7224，类似于 CVE-2014-1939 ，WebView 内置导出 “accessibility” 和
    “accessibilityTraversal” 两个 Java Object 接口，可被利用实现远程任意代码执行。

如何解决漏洞
1、Android 4.2 以下不要在使用 JavascriptInterface方式，4.2 以上需要添加注解 @JavascriptInterface 才能调用。（这部分和JsBrige 有关，更详细的内容后面会介绍）
2、同1解决；
3、在创建 WebView 时，使用 removeJavascriptInterface 方法将系统注入的 searchBoxJavaBridge_ 对象删除。
4、当系统辅助功能服务被开启时，在 Android 4.4 以下的系统中，由系统提供的 WebView 组件都默认导出
  ”accessibility” 和 ”accessibilityTraversal” 这两个接口，这两个接口同样存在远程任意代码执行的威胁，
  同样的需要通过 removeJavascriptInterface 方法将这两个对象删除。
    super.removeJavascriptInterface("searchBoxJavaBridge_");
    super.removeJavascriptInterface("accessibility");
    super.removeJavascriptInterface("accessibilityTraversal");
以上都是系统机制层面上的漏洞，还有一些是使用 WebView 不挡产生的漏洞。
5、通过 WebSettings.setSavePassword(false) 关闭密码保存提醒功能，防止明文密码存在本地被盗用。
6、WebView 默认是可以使用 File 协议的，也就是 setAllowFileAccess(true)，我们应该是主动设置为
    setAllowFileAccess(false),防止加载本地文件，移动版的 Chrome 默认禁止加载 file 协议的文件。
    setAllowFileAccess(true);//设置为 false 将不能加载本地 html 文件
    setAllowFileAccessFromFileURLs(false);
    setAllowUniversalAccessFromFileURLs(false);
    if (url.startsWith("file://") {
        setJavaScriptEnabled(false);
    } else {
        setJavaScriptEnabled(true);
    }

ZHU yuyang WebView 与 JavaScript 交互的三种形式两种原理分析如下：
1、使用 addJavascriptInterface
    原理：这是Android提供的Js与Native通信的官方解决方案，将 java 对象注入到 Js 中直接作为window的某一变量来
  使用。
2、WebViewClient 中 shouldOverrideUrlLoading (WebView view, String url)。
    利用 scheme iframe 机制，只要有iframe 加载，shouldOverrideUrlLoading 方法就会有回调。可以构造一个
  特殊格式的url，使用shouldOverrideUrlLoading 方法拦截url，根据解析url来之行native方法逻辑。
3、利用 WebChromeClient 中的 onJsAlert、onJsConfirm、onJsPrompt 提示接口，同样也是拦截操作。
    利用 js调用window对象的对应的方法，即 window.alert，window.confirm，window.prompt，
  WebChromeClient 对象中的三个方法 onJsAlert、onJsConfirm、onJsPrompt 就会被触发，有了js到native
  的通道，那么我们就可以制定协议来约束对方。最终我们选择使用 prompt 方法，onJsPrompt()方法的message参数
  的值正是Js的方法window.prompt()的message的值。

ZHU yuyang Activity结束后清理WebView
    @Override
    protected void onDestroy() {
        if (mWebView != null) {
            // 如果先调用destroy()方法，则会命中if (isDestroyed()) return;这一行代码，需要先onDetachedFromWindow()，再
            // destory()
            ViewParent parent = mWebView.getParent();
            if (parent != null) {
                ((ViewGroup) parent).removeView(mWebView);
            }

            mWebView.stopLoading();
            // 退出时调用此方法，移除绑定的服务，否则某些特定系统会报错
            mWebView.getSettings().setJavaScriptEnabled(false);
            mWebView.clearHistory();
            mWebView.clearView();
            mWebView.removeAllViews();

            mWebView.destroy();
            mWebView = null;
        }
        super.onDestroy();
    }

ZHU yuyang Android与JS交互常用JsBridge（gitHub上的开源项目）
其实现的基本原理：
JS调用Android基本有下面三种方式
    webView.addJavascriptInterface()
    WebViewClient.shouldOverrideUrlLoading()
    WebChromeClient.onJsAlert()/onJsConfirm()/onJsPrompt() 方法分别回调拦截JS对话框alert()、confirm()、prompt()消息
Android调用JS
    webView.loadUrl();
    webView.evaluateJavascript()
JsBridge原理：
    1.Android调用JS是通过loadUrl(url),url中可以拼接要传给JS的对象
    2.JS调用Android是通过shouldOverrideUrlLoading
    3.JsBridge将沟通数据封装成Message，然后放进Queue,再将Queue进行传输
使用方法：
    被调用方注册Handler
        registerHandler(String handlerName, BridgeHandler handler)
    调用方调用Handler
        callHandler(String handlerName, String data, CallBackFunction callBack)
    （如果没用回调 callBack可以为空。甚至handlerName都可以为空，就相当于调用BridgeWebView的send方法，
    但这要求html中有默认的messageHandler）
