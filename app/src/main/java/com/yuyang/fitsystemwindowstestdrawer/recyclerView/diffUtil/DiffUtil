可参考博客：http://blog.csdn.net/zxt0601/article/details/52562770

    DiffUtil是support-v7:24.2.0中的新工具类，它用来比较两个数据集，寻找出旧数据集-》新数据集的最小变化量。
说到数据集，相信大家知道它是和谁相关的了，就是我的最爱，RecyclerView。
它最大的用处就是在RecyclerView刷新时，不再无脑mAdapter.notifyDataSetChanged()。

    以前无脑mAdapter.notifyDataSetChanged()有两个缺点：
    1、不会触发RecyclerView的动画（删除、新增、位移、change动画）
    2、性能较低，毕竟是无脑的刷新了一遍整个RecyclerView,极端情况下：新老数据集一模一样，效率是最低的。

  使用DiffUtil后，改为如下代码：
    DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(new DiffCallBack(mDatas, newDatas), true);
    diffResult.dispatchUpdatesTo(mAdapter);

    它会自动计算新老数据集的差异，并根据差异情况，自动调用以下四个方法
    adapter.notifyItemRangeInserted(position, count);
    adapter.notifyItemRangeRemoved(position, count);
    adapter.notifyItemMoved(fromPosition, toPosition);
    adapter.notifyItemRangeChanged(position, count, payload);

    显然，这个四个方法在执行时都是伴有RecyclerView的动画的，且都是定向刷新方法，刷新效率蹭蹭的上升了。



    DiffUtil内部采用的Eugene W. Myers’s difference 算法，但该算法不能检测移动的item，所以Google在其基础上改进支持
 检测移动项目，但是检测移动项目，会更耗性能。
    在有1000项数据，200处改动时，这个算法的耗时：
        打开了移动检测时：平均值：27.07ms，中位数：26.92ms。
        关闭了移动检测时：平均值：13.54ms，中位数：13.36ms。
    如果我们的list过大，这个计算出DiffResult的时间还是蛮久的，所以我们应该将获取DiffResult的过程放到子线程中，
 并在主线程中更新RecyclerView。