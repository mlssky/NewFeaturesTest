Android 图像处理：

Paint
    常用方法：
       setAntiAlias();      //设置画笔的锯齿效果
       setColor();          //设置画笔颜色
       setARGB();           //设置画笔的A、R、G、B值
       setAlpha();          //设置画笔的Alpha值
       setTextSize();       //设置字体的大小
       setStyle();          //设置画笔风格（实心或空心）
       setStrokeWidth();    //设置空心边框的宽度
       setFakeBoldText (boolean fakeBoldText);//设置文本仿粗体。注意设置在小字体上效果会非常差。
       setFilterBitmap(boolean filter); //如果该项设置为true，则图像在动画进行中会滤掉对Bitmap图像的优化操作，加快显示速度，本设置项依赖于dither和xfermode的设置。
       setLetterSpacing(float letterSpacing);//设置行间距，默认是0.
       setPathEffect(PathEffect effect);//设置绘制路径的效果，如点画线等
       setShadowLayer(float radius, float dx, float dy, int shadowColor);//radius表示阴影的扩散半径；dx和dy表示阴影平面上的偏移值；shadowColor就不说了阴影颜色。
       setStrokeCap(Paint.Cap cap);//该方法用来设置我们画笔的 笔触风格 ，比如：ROUND，表示是圆角的笔触。
                                   //那么什么叫笔触呢，其实很简单，就像我们现实世界中的笔，如果你用圆珠笔在纸上
                                   //戳一点，那么这个点一定是个圆，即便很小，它代表了笔的笔触形状，如果我们把一支
                                   //铅笔笔尖削成方形的，那么画出来的线条会是一条弯曲的“矩形”，这就是笔触的意思。
                                   //除了ROUND，Paint.Cap还提供了另外两种类型：SQUARE和BUTT
---------------------------------------------------------------------------------------------
ColorMatrix  颜色矩阵
    ColorMatrix colorMatrix = new ColorMatrix();
    常用方法：（例：ColorMatrixHelperActivity.java）
        setRotate(int axis, float degree);      //设置色调，axis-系统分别使用0、1、2来代表Red、Green、Blue三种颜色的处理；
                                                          degree-需要处理的值 例如：colorMatrix.setRotate(0, hue0);
        setSaturation(float sat);               //设置饱和度， sat取值范围[0,1]
        setScale(float rScale, float gScale, float bScale, float aScale);   //设置亮度
        postConcat(ColorMatrix postmatrix);     //将矩阵的作用混合

    通过直接设置颜色矩阵值方法：（例：ColorMatrixActivity.java）
        矩阵乘法运算：
        |a b c d e||R|  |aR bG cB dA e|  |R1|
        |f g h i j||G|  |fR gG hB iA j|  |G1|
        |k l m n o||B|= |kR lG mB nA o|= |B1|
        |p q r s t||1|  |pR qG rB sA t|  |A1|
        R1 = aR + bG + cB + dA + e;
        ....
        矩阵第一行abcde值用来决定新的颜色值中的R--红色
        矩阵第二行fghij值用来决定新的颜色值中的G--绿色
        矩阵第三行klmno值用来决定新的颜色值中的B--蓝色
        矩阵第四行pqrst值用来决定新的颜色值中的A--透明度
        矩阵中第五列ejot值分别用来决定每个分量重的offset，即偏移量

    像素点分析修改图像色值：（例：PixelsEffectActivity.java）

    最后通过：paint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));
            canvas.drawBitmap(bitmap, 0, 0, paint);
        实现效果。
---------------------------------------------------------------------------------------------
Matrix 变形矩阵
    Matrix matrix = new Matrix();
    常用方法：（例：MatrixActivity.java）
        matrix.setRotate();       //旋转变换
        matrix.setTranslate();    //平移变换
        matrix.setScale();        //缩放
        matrix.setSkew();         //错切
        matrix.pre()/.post();     //矩阵的前乘和后乘运算

    通过直接设置变形矩阵值方法：（例：MatrixValueSetActivity.java）
        |a b c||X|  |X1|
        |d e f||Y|= |Y1|
        |g h i||1|  |1 |
        X1 = aX + bY + c;
        ...
        a、e控制Scale--缩放
        b、d控制Skew --错切
        c、f控制Trans--平移
        a、b、d、e共同控制Rotate--旋转

    像素块分析修改图像图形：（例：PixelMatrixEffectActivity.java）

    最后通过：canvas.drawBitmap(bitmap, matrix, null);
            实现效果。
---------------------------------------------------------------------------------------------
Xfermode
    PorterDuff.Mode为枚举类,一共有16个枚举值:
        1.PorterDuff.Mode.CLEAR
          所绘制不会提交到画布上。
        2.PorterDuff.Mode.SRC
           显示上层绘制图片
        3.PorterDuff.Mode.DST
          显示下层绘制图片
        4.PorterDuff.Mode.SRC_OVER
          正常绘制显示，上下层绘制叠盖。
        5.PorterDuff.Mode.DST_OVER
          上下层都显示。下层居上显示。
        6.PorterDuff.Mode.SRC_IN
           取两层绘制交集。显示上层。
        7.PorterDuff.Mode.DST_IN
          取两层绘制交集。显示下层。
        8.PorterDuff.Mode.SRC_OUT
         取上层绘制非交集部分。
        9.PorterDuff.Mode.DST_OUT
         取下层绘制非交集部分。
        10.PorterDuff.Mode.SRC_ATOP
         取下层非交集部分与上层交集部分
        11.PorterDuff.Mode.DST_ATOP
         取上层非交集部分与下层交集部分
        12.PorterDuff.Mode.XOR
          异或：去除两图层交集部分
        13.PorterDuff.Mode.DARKEN
          取两图层全部区域，交集部分颜色加深
        14.PorterDuff.Mode.LIGHTEN
          取两图层全部，点亮交集部分颜色
        15.PorterDuff.Mode.MULTIPLY
          取两图层交集部分叠加后颜色
        16.PorterDuff.Mode.SCREEN
          取两图层全部区域，交集部分变为透明色

    使用方法：
        paint.setXfermode(PorterDuff.Mode);

---------------------------------------------------------------------------------------------
Canvas
    常用绘图方法：
       drawPoint(x,y,paint);        //绘制点
       drawLine(startX,startY,endX,endY,paint); //绘制线
       drawLines(pts,paint);        //绘制多条线 float[] pts = {startX1,startY1,endX1,endY1, startX2,startY2,endX2,endY2}
       drawRect(left,top,right,bottom,paint);   //绘制矩形
       drawRoundRect(left,top,right,bottom,radiusX,radiusY,paint);  //绘制圆角矩形
       drawCircle(circleX,circleY,radius,paint);    //绘制圆
       drawArc(left,top,right,bottom,startAngle,sweepAngle,userCenter,paint);   //绘制弧形、扇形
       drawOval(left,top,right,bottom,paint);   //绘制椭圆
       drawText(text,startX,startY,paint);  //绘制文字
       drawPosText(text, new float[]{X1,Y1,X2,Y2,...Xn,Yn},paint);  //在指定位置绘制文本
       drawPath(path, paint);       //绘制路径  Path path = new Path(); path.moveTo(0,0); path.lineTo(50,50);

    常用方法：
       save();
       restore();
       translate();
       rotate();
       saveLayer();     //创建一个图层（详见：SaveLayerView.java）

