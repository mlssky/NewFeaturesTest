Java 反射是可以让我们在运行时获取类的函数、属性、父类、接口等 Class 内部信息的机制

1、获取 Class 对象（例：ReflectionSimple1.java）
  编译期知道一个类的名字：
    Class<?> myObjectClass = MyObject.class;
  已经得到了某个对象，获取这个对象的 Class 对象:
    Student me = new Student("mr.simple");
    Class<?> clazz = me.getClass();
  编译期获取不到目标类型，但是知道它的完整类路径:
    Class<?> myObjectClass = Class.forName("com.example.reflection.Student");
    ＃＃方法说明：
    // 加载指定的 Class 对象，参数 1 为要加载的类的完整路径，例如"com.simple.Student". ( 常用方式 )
    public static Class<?> forName(String className)
    // 加载指定的 Class 对象，参数 1 为要加载的类的完整路径，例如"com.simple.Student";
    // 参数 2 为是否要初始化该 Class 对象，参数 3 为指定加载该类的 ClassLoader.
    public static Class<?> forName(String className, boolean shouldInitialize, ClassLoader classLoader)

2、通过 Class 对象构造目标类型的对象（例：ReflectionSimple1.java）
  首先要获取Class对象的构造方法Constructor：
    // 通过 Class 对象获取 Constructor，Student 的构造函数有一个字符串参数，因此这里需要传递参数的类型
    Constructor<?> constructor = clz.getConstructor(String.class);
    // 通过 Constructor 来创建 Student 对象
    Object obj = constructor.newInstance("mr.simple");
    ＃＃方法说明：
    // 获取一个公有的构造函数，参数为可变参数，如果构造函数有参数，那么需要将参数的类型传递给 getConstructor 方法
    public Constructor<T> getConstructor(Class...<?> parameterTypes)
    // 获取目标类所有的公有构造函数
    public Constructor[]<?> getConstructors()

3、获取当前类中定义的方法（例：ReflectionSimple2.java）
  获取Class对象的方法Method：
    ＃＃方法说明：
    // 获取 Class 对象中指定函数名和参数的函数，参数 1 为函数名，参数 2 为参数类型列表
    public Method getDeclaredMethod (String name, Class...<?> parameterTypes)
    // 获取该 Class 对象中的所有函数( 不包含从父类继承的函数 )
    public Method[] getDeclaredMethods ()
    // 获取指定的 Class 对象中的**公有**函数，参数 1 为函数名，参数 2 为参数类型列表
    public Method getMethod (String name, Class...<?> parameterTypes)
    // 获取该 Class 对象中的所有**公有**函数 ( 包含从父类和接口类集成下来的函数 )
    public Method[] getMethods ()

  Method可以通过调用invoke(Object obj, Object... args)方法执行。

4、反射获取类中的属性（例：ReflectionSimple3.java）
  获取Class对象的属性Field：
    ＃＃方法说明：
    // 获取 Class 对象中指定属性名的属性，参数 1 为属性名
    public Field getDeclaredField (String name)
    // 获取该 Class 对象中的所有属性( 不包含从父类继承的属性 )
    public Field[] getDeclaredFields ()
    // 获取指定的 Class 对象中的**公有**属性，参数 1 为属性名
    public Field getField (String name)
    // 获取该 Class 对象中的所有**公有**属性 ( 包含从父类和接口类集成下来的公有属性 )
    public Field[] getFields ()

5、获取 Class 对象的父类／接口（例：ReflectionSimple4.java）
  获取Class对象的父类Class：
    ＃＃方法说明：
    getSuperclass()
    getInterfaces()